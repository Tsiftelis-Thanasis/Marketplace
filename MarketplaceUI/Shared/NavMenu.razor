@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization


<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">MarketplaceUI</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>



<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    @if (isAuthenticated)
    {
        <ul class="nav flex-column">
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="dashboard">
                    <span class="oi oi-plus" aria-hidden="true"></span> DashBoard
                </NavLink>
            </li>
        </ul>
    }
 </div>


@code {
    private AuthenticationState authState;
    private bool isAuthenticated = false;
    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthStateChanged;
    }

    private async void OnAuthStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        StateHasChanged(); // Force UI refresh
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthStateChanged;
    }

}

